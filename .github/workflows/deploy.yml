name: Build and Deploy Hugo Site

on:
  push:
    branches:
      - main # Or your default branch

jobs:
  # Job 1: Build the Hugo site on GitHub's runners
  build:
    name: Build Hugo Site
    runs-on: ubuntu-latest # Use GitHub's runner for the build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for Hugo's GitInfo features if you use them
          submodules: true # Checkout submodules if your Hugo theme uses them

      - name: Set up Hugo
        uses: peaceiris/actions-hugo@v3 # Action to install Hugo
        with:
          hugo-version: 'latest' # Or specify your Hugo version
          extended: true # Use Hugo extended version if needed

      - name: Build Hugo Site
        run: hugo --minify # Build site, output goes to ./public

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: hugo-site-output # Name of the artifact
          path: public # Upload the 'public' directory

  # Job 2: Deploy the built site using your self-hosted runner
  deploy:
    name: Deploy to Homelab
    needs: build # Run this job only after the 'build' job succeeds
    runs-on: self-hosted # Use YOUR runner for deployment

    steps:
      - name: Checkout Code (for Dockerfile.nginx)
        uses: actions/checkout@v4
        # We only need the Dockerfile.nginx from the repo here

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: hugo-site-output # Must match the upload artifact name
          path: public # Download the artifact content into a directory named 'public'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Ensures buildx is available on your self-hosted runner

      # Build the SIMPLE Nginx image using Dockerfile.nginx and the downloaded 'public' directory
      - name: Build Deployment Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: . # Build context includes Dockerfile.nginx and downloaded 'public' dir
          file: ./Dockerfile.nginx # Specify the correct Dockerfile
          push: false # Don't push to a registry
          tags: local-hugo-site:${{ github.sha }} # Tag with commit SHA
          load: true # Load the image into the runner's Docker daemon

      # Stop and remove the existing container
      - name: Stop and Remove Previous Container
        run: |
          docker stop hugo-site-container || true
          docker rm hugo-site-container || true
        continue-on-error: true

      # Run the new container using the image JUST built
      - name: Run New Container
        run: |
          docker run -d \
            --name hugo-site-container \
            --network proxy `# Connect to the 'proxy' network for Traefik` \
            --restart unless-stopped \
            `# --- Traefik and Watchtower Labels (Use your existing labels) --- ` \
            -l "traefik.enable=true" \
            -l "traefik.http.routers.bank.entrypoints=http" \
            -l "traefik.http.routers.bank.rule=Host(`bank.local.solivan.dev`)" \
            -l "traefik.http.middlewares.bank-https-redirect.redirectscheme.scheme=https" \
            -l "traefik.http.routers.bank.middlewares=bank-https-redirect" \
            -l "traefik.http.routers.bank-secure.entrypoints=https" \
            -l "traefik.http.routers.bank-secure.rule=Host(`bank.local.solivan.dev`)" \
            -l "traefik.http.routers.bank-secure.tls=true" \
            -l "traefik.http.routers.bank-secure.service=bank" \
            -l "traefik.http.services.bank.loadbalancer.server.port=3000" `# <<< IMPORTANT: Should match EXPOSE in Dockerfile.nginx (default 80)` \
            -l "traefik.docker.network=proxy" \
            -l "com.centurylinklabs.watchtower.enable=true" \
            `# --- End Labels --- ` \
            local-hugo-site:${{ github.sha }} # Use the image built in the previous step

      # Optional: Clean up old images if desired
      # - name: Prune old Docker images
      #   run: docker image prune -a -f --filter "until=24h"